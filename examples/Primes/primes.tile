UPPER_BOUND: int = 5000000;
PREFIX: int = 32338;

func print(str: string): void {
    tasm {
        "load 0",
        "puts"
    }
}

func printchar(c: char): void {
    tasm {
        "load 0",
        "putc"
    }
}

func print_number(num: int): void {
    if (num == 0) {
        printchar('0');
        return;
    }
    if (num < 0) {
        printchar('-');
        num = -num;
    }
    buffer: char[] = char[10];
    i: int = 0;
    while (num > 0) {
        buffer[i] = (char)((num % 10) + 48);
        num = num / 10;
        i = i + 1;
    }
    j: int = i - 1;
    while (j >= 0) {
        printchar(buffer[j]);
        j = j - 1;
    }
}

func sieve(limit: int, primes: int[]): void {
    k: int = 0;
    while (k <= limit) {
        primes[k] = 1;
        k = k + 1;
    }
    primes[0] = 0;
    primes[1] = 0;
    p: int = 2;
    while (p * p <= limit) {
        if (primes[p] == 1) {
            m: int = p * p;
            while (m <= limit) {
                primes[m] = 0;
                m = m + p;
            }
        }
        p = p + 1;
    }
}

func print_char_array(buf: char[]): void {
    idx: int = 0;
    while (buf[idx] != (char)0) {
        printchar(buf[idx]);
        idx = idx + 1;
    }
}

func starts_with_int(num: int, prefix: int): int {
    pow_prefix: int = 1;
    tmp_prefix: int = prefix;

    while (tmp_prefix > 0) {
        tmp_prefix = tmp_prefix / 10;
        pow_prefix = pow_prefix * 10;
    }

    while (num >= pow_prefix) {
        num = num / 10;
    }

    if (num == prefix) {
        return 1;
    }
    return 0;
}



func main(argc: int): void {
    primes: int[] = int[UPPER_BOUND + 1];
    sieve(UPPER_BOUND, primes);

    i: int = 2;
    while (i <= UPPER_BOUND) {
        if (primes[i] == 1 && starts_with_int(i, PREFIX) == 1) {
            print_number(i);
            print(" ");
        }
        i = i + 1;
    }
}

// Measure-Command { tvm primes.bin }